/* jshint newcap:false */
function VNode() {}

VNode.prototype = {
  bN_: function (finalChildCount, ownerComponent) {
    this.ce_ = finalChildCount;
    this.cf_ = 0;
    this.bV_ = null;
    this.cg_ = null;
    this.bS_ = null;
    this.bT_ = null;
    this.aS_ = ownerComponent;
  },

  get a_() {
    var firstChild = this.bV_;

    if (firstChild && firstChild.bU_) {
      var nestedFirstChild = firstChild.a_;
      // The first child is a DocumentFragment node.
      // If the DocumentFragment node has a first child then we will return that.
      // Otherwise, the DocumentFragment node is not *really* the first child and
      // we need to skip to its next sibling
      return nestedFirstChild || firstChild.b_;
    }

    return firstChild;
  },

  get b_() {
    var nextSibling = this.bT_;

    if (nextSibling) {
      if (nextSibling.bU_) {
        var firstChild = nextSibling.a_;
        return firstChild || nextSibling.b_;
      }
    } else {
      var parentNode = this.bS_;
      if (parentNode && parentNode.bU_) {
        return parentNode.b_;
      }
    }

    return nextSibling;
  },

  bG_: function (child) {
    this.cf_++;

    if (this.bX_ === "textarea") {
      if (child.ch_) {
        var childValue = child.bO_;
        this.bY_ = (this.bY_ || "") + childValue;
      } else if (child.bR_) {
        this.ci_ = true;
      } else {
        throw TypeError();
      }
    } else {
      var lastChild = this.cg_;

      child.bS_ = this;

      if (lastChild) {
        lastChild.bT_ = child;
      } else {
        this.bV_ = child;
      }

      this.cg_ = child;
    }

    return child;
  },

  c__: function finishChild() {
    if (this.cf_ === this.ce_ && this.bS_) {
      return this.bS_.c__();
    } else {
      return this;
    }
  }

  // ,toJSON: function() {
  //     var clone = Object.assign({
  //         nodeType: this.nodeType
  //     }, this);
  //
  //     for (var k in clone) {
  //         if (k.startsWith('_')) {
  //             delete clone[k];
  //         }
  //     }
  //     delete clone._nextSibling;
  //     delete clone._lastChild;
  //     delete clone.parentNode;
  //     return clone;
  // }
};

module.exports = VNode;